@inherits Custom.Hybrid.RazorTyped
@using ToSic.Sxc.Data

<h1>Typed Stacks (AllSettings &amp; MyResources)</h1>

@{
  AllSettings.Debug = true;
  var contentItem = AllSettings.Child("Images.Content");
  var nonExistingItem = AllSettings.Child("Images.NonExisting");
  var images = AllSettings.Children("Images");
}

<h3>objects</h3>

<ol>
  <li>
    AllSettings: @AllSettings
  </li>
  <li>
    contentItem: @contentItem
  </li>
  <li>
    nonExistingItem: @nonExistingItem
  </li>
  <li>
    images: (@images.Count()) @images
  </li>
</ol>

<h3>Settings.GoogleMaps.ApiKey</h3>

<ol>
  <li>
    Settings.GoogleMaps.ApiKey: @AllSettings.Get("Settings.GoogleMaps.ApiKey")
  </li>
</ol>

<h3>AllSettings.Images</h3>

<ol>
  <li>
    get: @AllSettings.Get("Images")
  </li>
</ol>

<h3>AllSettings.Images.Content</h3>
<ol>
  <li>
    get: @AllSettings.Get("Images.Content")
  </li>
</ol>

<h3>AllSettings.Images.Content.Width</h3>
<ol>
  <li>
    get: @AllSettings.Get("Images.Content.Width")
  </li>
  <li>
    int: @AllSettings.Int("Images.Content.Width")
  </li>
  <li>
    contentItem.Int: @contentItem.Int("Width")
  </li>
  <li>
    int w/Fallback: @AllSettings.Int("Images.Content.Width", fallback: -1)
  </li>
  <li>
    get&lt;int&gt;: @(AllSettings.Get<int>("Images.Content.Width"))
  </li>
  <li>
    get&lt;int&gt; with fallback: @(AllSettings.Get<int>("Images.Content.Width", fallback: -1))
  </li>
  <li>
    get with fallback and no type: @(AllSettings.Get("Images.Content.Width", fallback: -1))
  </li>
</ol>

<h3>AllSettings.Images.Content.UnknownProperty</h3>

<ol>
  <li>
    get: @AllSettings.Get("Images.Content.UnknownProperty")
  </li>
  <li>
    Int(): @AllSettings.Int("Images.Content.UnknownProperty")
  </li>
  <li>
    Int(fallback): @AllSettings.Int("Images.Content.UnknownProperty", fallback: -7242)
  </li>
  <li>
    get&lt;int&gt;: @(AllSettings.Get<int>("Images.Content.UnknownProperty"))
  </li>
  <li>
    get&lt;int&gt; with fallback: @(AllSettings.Get<int>("Images.Content.UnknownProperty", fallback: -1))
  </li>
</ol>


<h3>AllSettings.Images.Content.Width.Impossible</h3>

<ol>
  <li>
    .Dyn. <em>not tested - would throw error</em>
  </li>
  <li>
    get: @AllSettings.Get("Images.Content.Width.Impossible")
  </li>
  <li>
    Int(): @AllSettings.Int("Images.Content.Width.Impossible")
  </li>
  <li>
    Int(fallback): @AllSettings.Int("Images.Content.Width.Impossible", fallback: -4)
  </li>
  <li>
    get&lt;int&gt;: @(AllSettings.Get<int>("Images.Content.Width.Impossible"))
  </li>
  <li>
    get&lt;int&gt; with fallback: @(AllSettings.Get<int>("Images.Content.Width.Impossible", fallback: -1))
  </li>
</ol>

<h3>Resources SomeLogo</h3>
<ol>
  <li>
    get: @AllResources.Get("SomeLogo")
  </li>
  <li>
    Field: @((AllResources as ITypedItem).Field("SomeLogo"))
  </li>
  <li>
    Image: @((AllResources as ITypedItem).Img("SomeLogo"))
  </li>
  <li>
    File: @((AllResources as ITypedItem).File("SomeLogo").Name)
  </li>
  <li>
    Folder: @((AllResources as ITypedItem).Folder("SomeLogo").Name)
  </li>
  @* <li>
    get&lt;string&gt;: @(MyResources.Get<string>("SomeLogo"))
  </li>
  <li>
    get&lt;int&gt;: @(MyResources.Get<int>("SomeLogo"))
  </li>
  <li>
    get&lt;int&gt; with fallback: @(MyResources.Get<int>("SomeLogo", fallback: -1))
  </li> *@
</ol>