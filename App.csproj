<Project Sdk="Microsoft.NET.Sdk.Web">
  <!-- This file helps VS Code provide IntelliSense - see https://go.2sxc.org/vscode -->

  <!-- Specify the default Namespace for C# code in this specific App -->
  <PropertyGroup>
    <RootNamespace>AppCode</RootNamespace>
  </PropertyGroup>

  <!-- First: Detect if it's running in Dnn, Oqtane-Production or Oqtane-Dev - and put in variable "Environment" -->
  <!-- TODO: @STV, pls improve to use variables such as "RunningInDnn" so it's easier to understand. 
    Also, add an OR condition to check both Oqtanes.
    I had trouble reading the code, because ${Environment} in the conditions below looked like a system feature,
    and since I didn't know csproj to well, I was confused. - and others will be too.

    The Oqtane code below should then have 3 sections, one for Oqtane in general, one for dlls oqtane-prod / dev.
  -->
  <PropertyGroup>
    <RunningInDnn Condition="Exists('..\..\..\..\bin\DotNetNuke.dll')">true</RunningInDnn>
    <!-- TODO: @STV - add an OR condition to check both Oqtanes -->
    <RunningInOqtane Condition="Exists('..\..\..\Oqtane.Server.dll')">true</RunningInOqtane>
    <OqtaneIsProd Condition="Exists('..\..\..\Oqtane.Server.dll')">true</OqtaneIsProd>
    <OqtaneIsDev Condition="Exists('..\..\..\bin\Debug\net8.0\Oqtane.Server.dll')">true</OqtaneIsDev>
    <!-- TODO: @STV remove this once it works -->
    <Environment Condition="Exists('..\..\..\..\bin\DotNetNuke.dll')">Dnn</Environment>
    <Environment Condition="Exists('..\..\..\Oqtane.Server.dll')">OqtaneProd</Environment>
    <Environment Condition="Exists('..\..\..\bin\Debug\net8.0\Oqtane.Server.dll')">OqtaneDev</Environment>
  </PropertyGroup>

  <!-- PropertyGroup for Dnn -->
  <PropertyGroup Condition="'$(Environment)' == 'Dnn'">
    <!-- Specify the .net Framework you are targeting - this is usually net4.7.2 or net4.8
      https://learn.microsoft.com/en-us/dotnet/standard/frameworks
      - eg "net472", "net48", "net8.0" etc.
      - net472 is the default for DNN 9.8 and earlier but usually net48 works
      - net8.0 is the default for Oqtane 5
    -->
    <TargetFramework>net472</TargetFramework>

    <!-- Specify what C# version to use
      https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history
      - eg. "7.3", "8.0" or "12.0" (Oqtane 5+)
    -->
    <LangVersion>8.0</LangVersion>

    <!-- Variable to path where the DLLs are in Dnn
      - This allows you to easily adjust the path if you have a different location
      - For clarity / consistency, we recommend to not end with a slash
      - Below you will use it using $(PathBin)
    -->
    <!-- PathBin for Dnn -->
    <PathBin>..\..\..\..\bin</PathBin>
  </PropertyGroup>

  <!-- Settings for Oqtane in Production - in this case, the bin folder is in the root. -->
  <PropertyGroup Condition="'$(Environment)' == 'OqtaneProd'">
    <!-- Oqtane 5+ uses .net 8 and a very new C# language version -->
    <TargetFramework>net8.0</TargetFramework>
    <!-- TODO: @STV - can we not use "latest" here? -->
    <LangVersion>12.0</LangVersion>
    <!-- PathBin Oqtane production, just up 3 folders, no bin-subfolder -->
    <PathBin>..\..\..</PathBin>
  </PropertyGroup>

  <!-- Settings for Oqtane in Development/Debug - in this case, the bin folder is deeper down -->
  <PropertyGroup Condition="'$(Environment)' == 'OqtaneDev'">
    <!-- Oqtane 5+ uses .net 8 and a very new C# language version -->
    <TargetFramework>net8.0</TargetFramework>
    <LangVersion>12.0</LangVersion>
    <!-- PathBin Oqtane dev/debug, up 3 folders and current build folder -->
    <PathBin>..\..\..\bin\Debug\net8.0</PathBin>
  </PropertyGroup>


  <!-- IntelliSense: Load all DLLs which exist in Dnn and Oqtane from the bin folder -->
  <ItemGroup>
    <Reference Include="$(PathBin)\ToSic.*.dll" />
    <!-- Also load files in the Dependencies folder of the current App -->
    <Reference Include="Dependencies\*.dll" />
  </ItemGroup>


  <!-- Dnn IntelliSense: Load all special DLLs of Dnn and .net Framework -->
  <ItemGroup Condition="'$(Environment)' == 'Dnn'">
    <!-- System.Web and DotNetNuke DLLs help when creating APIs, but be aware that it may make your code less hybrid -->
    <Reference Include="$(PathBin)\DotNetNuke.dll" />
    <Reference Include="$(PathBin)\DotNetNuke.*.dll" />
    <Reference Include="$(PathBin)\System.Web.Http.dll" />
    <Reference Include="$(PathBin)\System.Web.WebPages.dll" />

    <!-- System.Web is not in the DNN folder but in the .net Framework installed on the server -->
    <Reference Include="System.Web" />
  </ItemGroup>

  <!-- Polymorphism
    If you're working with Polymorphism then you have many of the same files, which confuses
  Intellisense eg.
    - /live and /staging have the same files
    - /bs3 /bs4 / bs5 have the same files
    The following is meant to exclude some of these folders from intellisense
  -->
  <!-- Example: exclude /live as we're always working on /staging -->
  <ItemGroup>
    <None Remove="live\**" />
    <Content Remove="live\**" />
    <Compile Remove="live\**" />
    <EmbeddedResource Remove="live\**" />
  </ItemGroup>

  <Target Name="PrintEnvironment" BeforeTargets="PreBuildEvent">
    <Message Text="Environment='$(Environment)'" Importance="High" />
    <Message Text="TargetFramework='$(TargetFramework)'" Importance="High" />
    <Message Text="LangVersion='$(LangVersion)'" Importance="High" />
  </Target>
</Project>