@inherits Custom.Hybrid.Razor14

<h1>Test Secure Encrypted Form2 - query string parameters</h1>

<p><b>[SecureEndpoint]</b> attribute on <b>SubmitForm2</b> method width many parameters in query string.</p>
<p>Check messages in development console.</p>

<label for="p1">P1:</label>
<textarea id="p1" name="p1" rows="1" style="width:100%">t1</textarea>
<label for="p2">P2:</label>
<textarea id="p2" name="p2" rows="1" style="width:100%">t2</textarea>
<label for="p3">P3:</label>
<textarea id="p3" name="p3" rows="1" style="width:100%">t3</textarea>
<label for="p4">P4:</label>
<textarea id="p4" name="p4" rows="1" style="width:100%">1</textarea>
<br><br>
<button id="button1" name="button1" type="submit">Submit</button>

@Html.Partial("__SharedPost.cshtml")

@Kit.Page.TurnOn("window.postEncryptedData2()", require: "window.$2sxc", data: new { Controller = DynamicModel.Controller })

<script type="text/javascript">
    // Use an IFFE to ensure the variables are not exposed globaly
    // See https://developer.mozilla.org/en-US/docs/Glossary/IIFE
    (() => {
        async function postEncryptedData() {
            
            // Prepare data to be sent
            const data = {
                p1: document.getElementById('p1').value,
                p2: document.getElementById('p2').value,
                p3: document.getElementById('p3').value,
                p4: parseInt(document.getElementById('p4').value, 10)
            };

            $2sxc(@CmsContext.Module.Id).webApi
                .fetchJson('app/auto/WebApi-SecureEndpointAttribute/api/SecureEndpoint/SubmitForm2?q1=11&q2=qq22', data, {})
                .then(result => {
                    if (result.data.p1 == data.p1 && result.data.p2 == data.p2 && result.data.p3 == data.p3 && result.data.p4 == data.p4) {
                        console.log('Success:', result, result.data);
                    } else {
                        console.error('Error: Data mismatch', data, result);
                    }
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
        }

        document.getElementById('button1').addEventListener('click', async function (event) {
            event.preventDefault();
            await postEncryptedData();
        });

        // Generate on window so it can be called from the html
        window.postEncryptedData2 = postEncryptedData;

    })();
</script>
