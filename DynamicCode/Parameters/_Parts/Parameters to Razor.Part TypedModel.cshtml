@inherits Custom.Hybrid.RazorTyped

<h2>Dynamic Code - TypedModel to Razor using MyModel</h2>
<ol>
  <li>Found (obj): @MyModel.Get("Found")</li>

  <li>Found (string): @MyModel.String("Found")</li>
  <li>Found (bool): @MyModel.Bool("Found")</li>
  <li>Non-Existing (bool): @MyModel.Bool("NonExisting", required: false)</li>
  <li>Non-Existing (bool, true): @MyModel.Bool("NonExisting", fallback: true)</li>
  <li>
    Non-Existing (bool, required = false):
    @MyModel.Bool("NonExisting", required: false)
  </li>
</ol>

<h3>Item</h3>
<ol>
  <li>Item: @MyModel.Item("Item", required: true)</li>
  <li>Dyn to Item: @MyModel.Item("Dyn", required: true)</li>
  <li>Entity to Item: @MyModel.Item("Entity", required: true)</li>
  <li>Non-Existing (Item): @MyModel.Item("NonExisting", required: false)</li>
</ol>
<h3>Items</h3>
<ol>
  <li>Items: @MyModel.Items("Items")</li>
  <li>Items from Item: @MyModel.Items("Item")</li>
  <li>Items from Entity: @MyModel.Items("Entity")</li>
  <li>Items from Dyn: @MyModel.Items("Dyn")</li>
  <li>Items from Non-Existing: @MyModel.Items("NonExisting", required: false)</li>
</ol>
<h3>Entity</h3>
<ol>
  <li>Entity from Entity: @MyModel.Entity("Entity", required: true)</li>
  <li>Entity from Dyn: @MyModel.Entity("Dyn", required: true)</li>
  <li>Entity from Item: @MyModel.Entity("Item", required: true)</li>
  <li>Entity from Non-Existing: @MyModel.Entity("NonExisting", required: false)</li>
</ol>

<h3>Item Image (.File)</h3>
<ol>
  <li>AlbumItem.File("Image").Url: @MyModel.Item("AlbumItem").File("Image").Url</li>

</ol>

<h3>File / Files</h3>
<ol>
  <li>Folder: @MyModel.Folder("Folder", required: true)</li>
  <li>Folders from folder: @MyModel.Folders("Folder", required: true)</li>
  <li>Folders TODO</li>
  <li>File: TODO</li>
  <li>File from files: @MyModel.File("Files", required: true)</li>
  <li>Files: @MyModel.Files("Files", required: true)</li>
  <li>Files from File: TODO</li>
</ol>


<h3>Album</h3>
@{
  var albumFolders = MyModel.Folders("AlbumFolders");
  var albumFiles = MyModel.Files("AlbumFiles");
  var firstPic = albumFiles.First();
  var firstMd = firstPic.Metadata;
  var document = MyModel.Item("AlbumItem").File("Document");
  var urlFile = MyModel.Item("AlbumItem").File("Url");
}
<ol>
  <li>Album: '@MyModel.Folder("Album").Name' (@MyModel.Folder("Album"))</li>
  <li>AlbumFolders: Count: @albumFolders.Count(); First: '@albumFolders.First().Name', (@albumFolders)</li>
  <li>AlbumFiles:
    Count: @albumFiles.Count(); <br>
    First: '@firstPic.Name'; <br>
    MdLabelDyn: '@(((dynamic)firstMd).Label)'; <br>
    MdLabelTyped: '@firstMd.String("Label")'; <br>
    Md HTML: @firstMd.Html("Label"); <br>
    (Type: @albumFiles);
  </li>
  <li>
    Url File: @urlFile - urlFile.Url
  </li>
</ol>