@inherits Custom.Hybrid.Razor14
@using ToSic.Sxc.Services;

<h1>Rich WYSIWYG Separator Tests</h1>
@{
  var linker = CreateInstance("../_Shared/TestLinker.cs");

  var pageParams = CmsContext.Page.Parameters;

  var cmsService = GetService<ICmsService>();
}

@if (pageParams[idParam] != null) {
  var testId = pageParams[idParam] as string;
  var test = GetWysiwygValue(testId);
  var testCms = AsTyped(test);
  <h2 @Kit.Toolbar.Default(test)>The Data / Result for @testId</h2>
  @testCms.Html("TestId", debug: true, toolbar: true)
  @testCms.Html("Contents", debug: true)
}

<div class="clearfix">
  <h2>The Tests</h2>
  <ol>
    @foreach (var test in AsList(App.Data[TypeName]))
    {
      <li>
        <strong>
          @linker.SubLinkWithIndicator(idParam, test.TestId, test.TestId)
        </strong>
        <br>
        @Html.Raw(test.TestDescription)
      </li>
    }
  </ol>
  <h2>Test Modes</h2>
  <ol>
    <li>@linker.SubLinkWithIndicator(modeParam, withCss, "With CSS")</li>
    <li>@linker.SubLinkWithIndicator(modeParam, null, "Without CSS")</li>
  </ol>
</div>


@functions {
  const string TypeName = "FieldValueWysiwyg";
  const string idParam = "testid";
  const string modeParam = "mode";
  const string withCss = "withcss";

  object GetWysiwygValue(string key) {
    var list = App.Data[TypeName];
    var found = list.FirstOrDefault(e => e.Get<string>("TestId") == key);
    return found;
  }
}
