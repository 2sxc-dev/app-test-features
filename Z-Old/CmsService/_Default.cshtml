@using System;
@using System.Collections.Generic;
@using Microsoft.Extensions.DependencyInjection;
@using Microsoft.Extensions.DependencyInjection.Extensions;
@using ToSic.Eav.Apps;
@using ToSic.Eav.Configuration;
@using ToSic.Eav.Data;
@using ToSic.Eav.Persistence.File;
@using ToSic.Eav.Run;
@using ToSic.Razor.Blade
@using ToSic.Sxc.Data
@using ToSic.Sxc.Services
@inherits Custom.Hybrid.Razor14
@functions{
  public IHtmlTag CmsServiceShow(string someHtmlValue)
  {
    var entity = TstDataEntity("someTextValue", someHtmlValue);
    var dynamicEntity = DynEntity(entity);
    var dynamicField = dynamicEntity.Field("Body");
    var imgService = GetService<Lazy<IImageService>>();
    var valueConverter = GetService<Lazy<IValueConverter>>();
    var cmsService = GetService<ICmsService>(); // new ToSic.Sxc.Services.CmsService.CmsService(imgService, valueConverter);
    return cmsService.Show(dynamicField);
  }

  public IEntity TstDataEntity(string text = "", string html = "")
  {
    var appStates = GetService<IAppStates>();
    var app = appStates.Get(App.AppId);
    var contentType = app.GetContentType("CmsServiceTest");
    if (contentType == null)
      throw new Exception("CmsServiceTest content type not found");
    var values = new Dictionary<string, object>() { { "Title", text }, { "Body", html } };
    return new Entity(App.AppId, 0, contentType, values, "Title");
  }
  public DynamicEntity DynEntity(IEntity entity = null)
  {
    var dynamicEntityDependencies = GetService<DynamicEntityDependencies>();
    return new DynamicEntity(entity, dynamicEntityDependencies);
  }
}
<h1>CmsService in razor code</h1>

<h2>Manual test</h2>
<ol>
  <li><xmp>@CmsServiceShow("<p>some html</p>")</xmp></li>
</ol>

<h2>Entities wysiwyg tests</h2>
<ol>
@foreach(var item in AsList(App.Data["CmsServiceTest"])) {
    <li>
      <dl>
        <dt>Test</dt>
        <dd>
          <xmp>@Html.Raw(item.Body)</xmp>
        </dd>
        <dt>Result</dt>
        <dd>
          <xmp>@CmsServiceShow(item.Body)</xmp>
        </dd>
      </dl>
    </li>
}
</ol>
