@inherits Custom.Hybrid.RazorTyped
@using ToSic.Razor.Blade
@using ToSic.Sxc.Services

<h1>Template Service</h1>
@{
  var templateSvc = Kit.Template;
  var engine = templateSvc.Default();
  var engine2 = templateSvc.Default();

  var templateQs = "[QueryString:TestPath]";

  var templateQsWrapped = $"Path is: <strong>{templateQs}</strong>";

  var myTestToken = "[My:TestValue]";
  var mySource = templateSvc.CreateSource("My", new Dictionary<string, string> { { "TestValue", "This is a test value" } });
  var mySources = new[] { mySource };
  var myEngine = templateSvc.Empty(sources: mySources);

  var mixedTokens = myTestToken + " and " + templateQs;

  var mixedEngine = templateSvc.Default(sources: mySources);
}
<p>
  The LookUpService should provide a way to look up values from other sources.
</p>

<h2>Template SVC direct calls</h2>

<ol>
  <li>
    Default engine / engine2 are equal: @(engine == engine2)
  </li>
  <li>
    Quick Parse <code>@templateQs</code>:
    <br>
    @templateSvc.Default().Parse(templateQs) 
  </li>
  <li>
    Parse <code>@mixedTokens</code> with template service and more sources in Parse(...):
    <br>
    @templateSvc.Default().Parse(mixedTokens, sources: mySources)
  </li>
  <li>
    Parse <code>@mixedTokens</code> with template service and more sources in Default(...):
    <br>
    @templateSvc.Default(sources: mySources).Parse(mixedTokens)
  </li>
</ol>

<h2>Template Engine</h2>

<ol>
  <li>
    Sources: @engine.GetSources().Count()
  </li>
  <li>
    Sources (depth: 1): @engine.GetSources(depth: 5).Count()
  </li>
  <li>
    Parse <code>@templateQs</code>:
    <br>
    @engine.Parse(templateQs) 
  </li>

  <li>
    Parse <code>@templateQsWrapped</code>:
    <br>
    @Html.Raw(engine.Parse(templateQsWrapped))
  </li>
  <li>
    Parse <code>@myTestToken</code> with default engine:
    <br>
    @engine.Parse(myTestToken)
  </li>
  <li>
    Parse <code>@myTestToken</code> with custom engine:
    <br>
    @myEngine.Parse(myTestToken)
  </li>
  <li>
    Parse <code>@mixedTokens</code> with default engine:
    <br>
    @engine.Parse(mixedTokens)
  </li>
  <li>
    Parse <code>@mixedTokens</code> with custom engine:
    <br>
    @myEngine.Parse(mixedTokens)
  </li>
  <li>
    Parse <code>@mixedTokens</code> with mixed engine:
    <br>
    @mixedEngine.Parse(mixedTokens)
  </li>
  <li>
    Parse <code>@mixedTokens</code> with default engine and more sources:
    <br>
    @engine.Parse(mixedTokens, sources: mySources)
  </li>
</ol>
