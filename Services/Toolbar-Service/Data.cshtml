@inherits Custom.Hybrid.Razor14

<h1>Toolbar Service - Data Buttons</h1>
<p>
  Show various cases where a toolbar service creates admin-buttons
</p>
@{
  var tlbTest = CreateInstance("ToolbarServiceTests.cs");

  var parentName = "DataWithRelationshipParent";
  var childName = "DataWithRelationshipChild";

  var aParent = AsDynamic(App.Data[parentName].First());
  var aChild = AsDynamic(App.Data[childName].First());

  var children2 = AsList(App.Data[childName]).Take(2);
  var childIds2 = children2.Select(d => d.EntityId);
  var childIdsString2 = string.Join(",", childIds2);

  var dataFiltered = Kit.Toolbar.Empty().Data("Dummy", filter: new { FavoriteNumber = 11 });
  var empty = Kit.Toolbar.Empty();
}

<ol>
  @tlbTest.TbTestAsVisibleTag("Basic, no params", "classic",
    empty.Data())

  @tlbTest.TbTestAsVisibleTag("Basic, params current content-item", "classic",
    empty.Data(Content))

  @tlbTest.TbTestAsVisibleTag("Basic, params another item (should take it's content-type)", "classic",
    empty.Data(aParent))

  @tlbTest.TbTestAsVisibleTag("Basic, just content-type name as string", "classic",
    empty.Data(parentName))
</ol>

<h3>Basic, just content-type name as string</h3>
<ol>

  @tlbTest.TbTestAsVisibleTag("Basic, just content-type name as string, filter as string", "classic",
    empty.Data(parentName, filter: "Child=" + aChild.EntityId))

  @tlbTest.TbTestAsVisibleTag("Basic, just content-type name as string, filter as string", "tweak",
    empty.Data(parentName, tweak: b => b.Filter("Child=" + aChild.EntityId)))

  @tlbTest.TbTestAsVisibleTag("Basic, just content-type name as string, filter as string", "tweak-kvp",
    empty.Data(parentName, tweak: b => b.Filter("Child", aChild.EntityId)))

</ol>

<h3>Multi-filter tweak</h3>
<ol>
  @tlbTest.TbTestAsVisibleTag("two values each KVP", "tweak-kvp",
    empty.Data(parentName, tweak: b => b.Filter("Child", "[" + aChild.EntityId + "]").Filter("Field2", "value2")))

  @tlbTest.TbTestAsVisibleTag("two values each string-pair", "tweak-kvp",
    empty.Data(parentName, tweak: b => b.Filter("Child=" + aChild.EntityId).Filter("Field2=value2")))

  @tlbTest.TbTestAsVisibleTag("two values object and string-pair", "tweak-kvp",
    empty.Data(parentName, tweak: b => b.Filter(new { Child = aChild.EntityId}).Filter("Field2=value2")))

</ol>

<h3>Basic, just content-type name as string, filter as [string]</h3>
<ol>

  @tlbTest.TbTestAsVisibleTag("Basic, just content-type name as string, filter as [string]", "classic",
    empty.Data(parentName, filter: "Child=[" + aChild.EntityId + "]"))

  @tlbTest.TbTestAsVisibleTag("Basic, just content-type name as string, filter as [string]", "tweak",
    empty.Data(parentName, tweak: b => b.Filter("Child=[" + aChild.EntityId + "]")))

  @tlbTest.TbTestAsVisibleTag("Basic, just content-type name as string, filter as [string]", "tweak-kvp",
    empty.Data(parentName, tweak: b => b.Filter("Child", "[" + aChild.EntityId + "]")))

</ol>

<h3>More</h3>
<ol>

  @tlbTest.TbTestAsVisibleTag("Basic, just content-type name as string, filter as [int,int]", "classic",
    empty.Data(parentName, filter: "Children=[" + childIdsString2 + "]"))

  @tlbTest.TbTestAsVisibleTag("Basic, just content-type name as string, filter as object", "classic",
    empty.Data(parentName, filter: new { Child = aChild.EntityId }))

  @tlbTest.TbTestAsVisibleTag("Filter as object, giving it a child", "classic",
    empty.Data(parentName, filter: new { Child = aChild }))

  @tlbTest.TbTestAsVisibleTag("Filter as an int[] array of numbers", "classic",
    empty.Data(parentName, filter: new { Child = childIds2 }))

  @tlbTest.TbTestAsVisibleTag("Filter by giving it an IEnumerable of children", "classic",
    empty.Data(parentName, filter: new { Child = children2 }))

  @tlbTest.TbTestAsVisibleTag("Another property, not relevant but just for demo", "classic",
    empty.Data("Dummy", filter: new { FavoriteNumber = 11 }))


</ol>
