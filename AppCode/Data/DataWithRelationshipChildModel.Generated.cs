// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "DataWithRelationshipChildModel.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class DataWithRelationshipChildModel
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpCustomModelsGenerator
// App/Edition: App Test Features/
// User:        2sichost
using System.Collections.Generic;

namespace AppCode.Data
{
  // This is a generated custom model class for DataWithRelationshipChild 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// DataWithRelationshipChild custom model. <br/>
  /// Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// This is a lightweight model that inherits from CustomModel. <br/>
  /// For properties, use the strongly-typed access such as `.Children`. <br/>
  /// For advanced features, consider using the full CustomItem instead.
  /// </summary>
  public partial class DataWithRelationshipChildModel: AutoGenerated.ZAutoGenDataWithRelationshipChildModel
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.DataWithRelationshipChildModel in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenDataWithRelationshipChildModel: Custom.Data.CustomModel
  {
    /// <summary>
    /// Children as list of DataWithRelationshipGrandChild.
    /// </summary>
    /// <remarks>
    /// Generated to return child-list child because field settings had Multi-Value=true. The type DataWithRelationshipGrandChild was specified in the field settings.
    /// This hides base property Children.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    /// <returns>
    /// An IEnumerable of specified type, but can be empty.
    /// </returns>
    public new IEnumerable<DataWithRelationshipGrandChild> Children => _children ??= _item.Children<DataWithRelationshipGrandChild>("Children");
    private IEnumerable<DataWithRelationshipGrandChild> _children;

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");
  }
}