// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "ForPrefillTestsModel.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class ForPrefillTestsModel
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpCustomModelsGenerator
// App/Edition: App Test Features/
// User:        2sichost
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using ToSic.Sxc.Adam;
using ToSic.Sxc.Data;

namespace AppCode.Data
{
  // This is a generated custom model class for ForPrefillTests 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// ForPrefillTests custom model. <br/>
  /// Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// This is a lightweight model that inherits from CustomModel. <br/>
  /// For properties, use the strongly-typed access such as `.ALink`. <br/>
  /// For advanced features, consider using the full CustomItem instead.
  /// </summary>
  public partial class ForPrefillTestsModel: AutoGenerated.ZAutoGenForPrefillTestsModel
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.ForPrefillTestsModel in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenForPrefillTestsModel: Custom.Data.CustomModel
  {
    /// <summary>
    /// ALink as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("ALink")
    /// </summary>
    public string ALink => _item.Url("ALink");

    /// <summary>
    /// Get the file object for ALink - or null if it's empty or not referencing a file.
    /// </summary>

    [JsonIgnore]
    public IFile ALinkFile => _item.File("ALink");

    /// <summary>
    /// Get the folder object for ALink.
    /// </summary>

    [JsonIgnore]
    public IFolder ALinkFolder => _item.Folder("ALink");

    /// <summary>
    /// ANumber as int. <br/>
    /// To get other types use methods such as .Decimal("ANumber")
    /// </summary>
    public int ANumber => _item.Int("ANumber");

    /// <summary>
    /// Date as DateTime.
    /// </summary>
    public DateTime Date => _item.DateTime("Date");

    /// <summary>
    /// Date2 as DateTime.
    /// </summary>
    public DateTime Date2 => _item.DateTime("Date2");

    /// <summary>
    /// Date3 as DateTime.
    /// </summary>
    public DateTime Date3 => _item.DateTime("Date3");

    /// <summary>
    /// IsSomething as bool. <br/>
    /// To get nullable use .Get("IsSomething") as bool?;
    /// </summary>
    public bool IsSomething => _item.Bool("IsSomething");

    /// <summary>
    /// ManyItems as list of ForPrefillTestsCategories.
    /// </summary>
    /// <remarks>
    /// Generated to return child-list child because field settings had Multi-Value=true. The type ForPrefillTestsCategories was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// An IEnumerable of specified type, but can be empty.
    /// </returns>
    public IEnumerable<ForPrefillTestsCategories> ManyItems => _manyItems ??= _item.Children<ForPrefillTestsCategories>("ManyItems");
    private IEnumerable<ForPrefillTestsCategories> _manyItems;

    /// <summary>
    /// ManyItemsPicker as single item of ITypedItem.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. 
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public ITypedItem ManyItemsPicker => _manyItemsPicker ??= _item.Child("ManyItemsPicker");
    private ITypedItem _manyItemsPicker;

    /// <summary>
    /// SingleItem as single item of ForPrefillTestsCategories.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type ForPrefillTestsCategories was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public ForPrefillTestsCategories SingleItem => _singleItem ??= _item.Child<ForPrefillTestsCategories>("SingleItem");
    private ForPrefillTestsCategories _singleItem;

    /// <summary>
    /// SingleItemPicker as single item of ITypedItem.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. 
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public ITypedItem SingleItemPicker => _singleItemPicker ??= _item.Child("SingleItemPicker");
    private ITypedItem _singleItemPicker;

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    public string Title => _item.String("Title", fallback: "");

    /// <summary>
    /// WYSIWYG as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("WYSIWYG", scrubHtml: true) etc.
    /// </summary>
    public string WYSIWYG => _item.String("WYSIWYG", fallback: "");
  }
}