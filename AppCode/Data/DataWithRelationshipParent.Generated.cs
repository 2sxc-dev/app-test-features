// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "DataWithRelationshipParent.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class DataWithRelationshipParent
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   DataClassesGenerator v17.03.01
// App/Edition: App Test Features/
// User:        2sichost
// When:        2024-03-04 13:17:54Z
using System.Collections.Generic;

namespace AppCode.Data
{
  // This is a generated class for DataWithRelationshipParent 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// DataWithRelationshipParent data. <br/>
  /// Generated 2024-03-04 13:17:54Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.Child`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class DataWithRelationshipParent: AutoGenerated.ZagDataWithRelationshipParent
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.DataWithRelationshipParent in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagDataWithRelationshipParent: Custom.Data.CustomItem
  {
    /// <summary>
    /// Child as single item of DataWithRelationshipChild.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type DataWithRelationshipChild was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public DataWithRelationshipChild Child => _child ??= _item.Child<DataWithRelationshipChild>("Child");
    private DataWithRelationshipChild _child;

    /// <summary>
    /// Children as list of DataWithRelationshipChild.
    /// </summary>
    /// <remarks>
    /// Generated to return child-list child because field settings had Multi-Value=true. The type DataWithRelationshipChild was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// An IEnumerable of specified type, but can be empty.
    /// </returns>
    public IEnumerable<DataWithRelationshipChild> Children => _children ??= _item.Children<DataWithRelationshipChild>("Children");
    private IEnumerable<DataWithRelationshipChild> _children;

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    public new string Title => _item.String("Title", fallback: "");
  }
}