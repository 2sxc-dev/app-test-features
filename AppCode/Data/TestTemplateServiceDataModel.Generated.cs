// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "TestTemplateServiceDataModel.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class TestTemplateServiceDataModel
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpCustomModelsGenerator
// App/Edition: App Test Features/
// User:        2sichost
using System;

namespace AppCode.Data
{
  // This is a generated custom model class for TestTemplateServiceData 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// TestTemplateServiceData custom model. <br/>
  /// Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// This is a lightweight model that inherits from CustomModel. <br/>
  /// For properties, use the strongly-typed access such as `.Age`. <br/>
  /// For advanced features, consider using the full CustomItem instead.
  /// </summary>
  public partial class TestTemplateServiceDataModel: AutoGenerated.ZAutoGenTestTemplateServiceDataModel
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.TestTemplateServiceDataModel in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenTestTemplateServiceDataModel: Custom.Data.CustomModel
  {
    /// <summary>
    /// Age as int. <br/>
    /// To get other types use methods such as .Decimal("Age")
    /// </summary>
    public int Age => _item.Int("Age");

    /// <summary>
    /// Birthday as DateTime.
    /// </summary>
    public DateTime Birthday => _item.DateTime("Birthday");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");
  }
}