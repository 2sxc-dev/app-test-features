// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "DummyModel.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class DummyModel
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpCustomModelsGenerator
// App/Edition: App Test Features/
// User:        2sichost
using System.Text.Json.Serialization;
using ToSic.Sxc.Adam;

namespace AppCode.Data
{
  // This is a generated custom model class for Dummy 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// Dummy custom model. <br/>
  /// Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// This is a lightweight model that inherits from CustomModel. <br/>
  /// For properties, use the strongly-typed access such as `.Body`. <br/>
  /// For advanced features, consider using the full CustomItem instead.
  /// </summary>
  public partial class DummyModel: AutoGenerated.ZAutoGenDummyModel
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.DummyModel in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenDummyModel: Custom.Data.CustomModel
  {
    /// <summary>
    /// Body as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Body", scrubHtml: true) etc.
    /// </summary>
    public string Body => _item.String("Body", fallback: "");

    /// <summary>
    /// FavoriteNumber as int. <br/>
    /// To get other types use methods such as .Decimal("FavoriteNumber")
    /// </summary>
    public int FavoriteNumber => _item.Int("FavoriteNumber");

    /// <summary>
    /// Image as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Image")
    /// </summary>
    public string Image => _item.Url("Image");

    /// <summary>
    /// Get the file object for Image - or null if it's empty or not referencing a file.
    /// </summary>

    [JsonIgnore]
    public IFile ImageFile => _item.File("Image");

    /// <summary>
    /// Get the folder object for Image.
    /// </summary>

    [JsonIgnore]
    public IFolder ImageFolder => _item.Folder("Image");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");
  }
}