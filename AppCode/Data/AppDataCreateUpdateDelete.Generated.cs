// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "AppDataCreateUpdateDelete.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class AppDataCreateUpdateDelete
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   DataModelGenerator v17.02.01
// App/Edition: App Test Features/
// User:        2sichost
// When:        2024-02-27 11:12:18Z
using ToSic.Sxc.Adam;

namespace AppCode.Data
{
  // This is a generated class for AppDataCreateUpdateDelete
  // To extend/modify it, see instructions above.

  /// <summary>
  /// AppDataCreateUpdateDelete data. <br/>
  /// Generated 2024-02-27 11:12:18Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.Boolean`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class AppDataCreateUpdateDelete: AppDataCreateUpdateDeleteAutoGenerated
  {  }

  /// <summary>
  /// Auto-Generated base class for AppDataCreateUpdateDelete.
  /// </summary>
  public abstract class AppDataCreateUpdateDeleteAutoGenerated: Custom.Data.Item16
  {
    /// <summary>
    /// Boolean as bool. <br/>
    /// To get nullable use .Get("Boolean") as bool?;
    /// </summary>
    public bool Boolean => _myItem.Bool("Boolean");

    /// <summary>
    /// BooleanTristate as bool. <br/>
    /// To get nullable use .Get("BooleanTristate") as bool?;
    /// </summary>
    public bool BooleanTristate => _myItem.Bool("BooleanTristate");

    /// <summary>
    /// Number as int. <br/>
    /// To get other types use methods such as .Decimal("Number")
    /// </summary>
    public int Number => _myItem.Int("Number");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    public string Title => _myItem.String("Title", fallback: "");

    /// <summary>
    /// TodoImage as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("TodoImage")
    /// </summary>
    public string TodoImage => _myItem.Url("TodoImage");

    /// <summary>
    /// Get the file object for TodoImage - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile TodoImageFile => _myItem.File("TodoImageFile");

    /// <summary>
    /// Get the folder object for TodoImage.
    /// </summary>
    public IFolder TodoImageFolder => _myItem.Folder("TodoImageFolder");

    /// <summary>
    /// Wysiwyg as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Wysiwyg", scrubHtml: true) etc.
    /// </summary>
    public string Wysiwyg => _myItem.String("Wysiwyg", fallback: "");
  }
}