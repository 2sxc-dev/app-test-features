// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "AdamFields.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class AdamFields
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.10.00
// App/Edition: App Test Features/
// User:        2sichost
// When:        2024-05-31 09:14:59Z
using System.Text.Json.Serialization;
using ToSic.Sxc.Adam;

namespace AppCode.Data
{
  // This is a generated class for AdamFields 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// AdamFields data. <br/>
  /// Generated 2024-05-31 09:14:59Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.Album`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class AdamFields: AutoGenerated.ZAutoGenAdamFields
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.AdamFields in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenAdamFields: Custom.Data.CustomItem
  {
    /// <summary>
    /// Album as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Album")
    /// </summary>
    public string Album => _item.Url("Album");

    /// <summary>
    /// Get the file object for Album - or null if it's empty or not referencing a file.
    /// </summary>

    [JsonIgnore]
    public IFile AlbumFile => _item.File("Album");

    /// <summary>
    /// Get the folder object for Album.
    /// </summary>

    [JsonIgnore]
    public IFolder AlbumFolder => _item.Folder("Album");

    /// <summary>
    /// Document as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Document")
    /// </summary>
    public string Document => _item.Url("Document");

    /// <summary>
    /// Get the file object for Document - or null if it's empty or not referencing a file.
    /// </summary>

    [JsonIgnore]
    public IFile DocumentFile => _item.File("Document");

    /// <summary>
    /// Get the folder object for Document.
    /// </summary>

    [JsonIgnore]
    public IFolder DocumentFolder => _item.Folder("Document");

    /// <summary>
    /// Image as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Image")
    /// </summary>
    public string Image => _item.Url("Image");

    /// <summary>
    /// Get the file object for Image - or null if it's empty or not referencing a file.
    /// </summary>

    [JsonIgnore]
    public IFile ImageFile => _item.File("Image");

    /// <summary>
    /// Get the folder object for Image.
    /// </summary>

    [JsonIgnore]
    public IFolder ImageFolder => _item.Folder("Image");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");

    /// <summary>
    /// Url as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Url")
    /// </summary>
    public string Url => _item.Url("Url");

    /// <summary>
    /// Get the file object for Url - or null if it's empty or not referencing a file.
    /// </summary>

    [JsonIgnore]
    public IFile UrlFile => _item.File("Url");

    /// <summary>
    /// Get the folder object for Url.
    /// </summary>

    [JsonIgnore]
    public IFolder UrlFolder => _item.Folder("Url");
  }
}