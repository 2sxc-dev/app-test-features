// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "InputPickerStringModel.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class InputPickerStringModel
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpCustomModelsGenerator
// App/Edition: App Test Features/
// User:        2sichost
using System.Collections.Generic;
using ToSic.Sxc.Data;

namespace AppCode.Data
{
  // This is a generated custom model class for InputPickerString 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// InputPickerString custom model. <br/>
  /// Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// This is a lightweight model that inherits from CustomModel. <br/>
  /// For properties, use the strongly-typed access such as `.PickerEntity`. <br/>
  /// For advanced features, consider using the full CustomItem instead.
  /// </summary>
  public partial class InputPickerStringModel: AutoGenerated.ZAutoGenInputPickerStringModel
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.InputPickerStringModel in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenInputPickerStringModel: Custom.Data.CustomModel
  {
    /// <summary>
    /// PickerEntity as single item of ITypedItem.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. 
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public ITypedItem PickerEntity => _pickerEntity ??= _item.Child("PickerEntity");
    private ITypedItem _pickerEntity;

    /// <summary>
    /// PickerString as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("PickerString", scrubHtml: true) etc.
    /// </summary>
    public string PickerString => _item.String("PickerString", fallback: "");
  }
}