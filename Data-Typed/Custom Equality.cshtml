@inherits Custom.Hybrid.RazorTyped
@using System.Linq
@using AppCode
@using AppCode.Data

<h1>Custom Item Equality (17.03+ | == in 17.04)</h1>
<p>
  Content-Type used: <code>TestGetValues</code>
</p>
@{
  // Get all items and the first one
  var items = App.Data.GetAll<TestGetValues>().ToList();

  // It's important that GetAll is called again, so the objects are newly created
  var item = App.Data.GetAll<TestGetValues>().First();
  var itemAsItem = AsItem(item);
  var firstInList = items.First();

  // Group by Child #1 of Grandchildren - one set should have the same one
  var itemsWithChildren = items
    .Where(i => i.IsNotEmpty("Children"))
    .ToList();

  var grouped = itemsWithChildren
    .GroupBy(i => i.Children.First()) // must have a first, as we only took the non-empty //.Child("Children"))
    .ToList();

  var gFirst = grouped.First().Key;
  var gSecond = grouped.Skip(1).First().Key;
}
<h2>Data infos for further debugging</h2>
<ol>
  <li>Class name: @nameof(TestGetValues)</li>
  <li>Item GetType: @item.GetType()</li>
  <li>Item ID: @item.Id</li>
  <li>firstInList Id: @firstInList.Id</li>
  <li>Item Count: @items.Count()</li>
  <li>Itemswithchildren count: @itemsWithChildren.Count()</li>
  <li>Grouped Count: @grouped.Count()</li>
  <li>Grouped First Count: @grouped.First().Count()</li>
  <li>Grouped Second Count: @grouped.Skip(1).First().Count()</li>
  <li>
    Grouped First Key: @gFirst.Id - @gFirst.GetHashCode()
  </li>
  <li>
    Grouped Second Key: @gSecond.Id - @gSecond.GetHashCode()
  </li>
</ol>
<hr>
<h2>Equality Checks</h2>
<ol>
  <li>
    Item == Item (itself): @Assert.AreEqual(item == item, true)
  </li>
  <li>
    First Item in Item-List = item made of first Entity: @Assert.AreEqual(firstInList == item, true)
    <strong>on objects "==" can work! we can overload ==!!</strong>
  </li>
  <li>
    Using item.Equals(item): @Assert.AreEqual(item.Equals(item), true)
  </li>
  <li>
    Using firstInList.Equals(item): @Assert.AreEqual(firstInList.Equals(item), true)
  </li>
  <li>
    Using item.Equals(firstInList): @Assert.AreEqual(item.Equals(firstInList), true)
  </li>
  <li>
    <hr>
  </li>
  <li>
    Custom Item == Item (ITypedItem): @Assert.AreEqual(itemAsItem == item, false)
  </li>
</ol>
