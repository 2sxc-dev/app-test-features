@inherits Custom.Hybrid.RazorTyped
@using System.Linq;
@using ToSic.Razor.Blade;
@using ToSic.Sxc.Data;

<h1>Strict Field Names (16.03)</h1>
<p>
  Content-Type used: <code>TestGetValues</code>
</p>
@{
  StrictItem = AsItem(App.Data["TestGetValues"].First());
  LooseItem = AsItem(StrictItem, strict: false); // this defaults to strict false ATM
}
@functions {
  private ITypedItem StrictItem {get; set;}
  public IHtmlString Strict(string field, string titleAddOn, Func<ITypedItem, string, object> func, bool? expectError = null) {
    return RunTest(StrictItem, "üîê " + field + titleAddOn, field, func, expectError);
  }

  private ITypedItem LooseItem {get; set;}
  public IHtmlString Loose(string field, string titleAddOn, Func<ITypedItem, string, object> func, bool? expectError = null) {
    return RunTest(LooseItem, "‚òÆÔ∏è " + field + titleAddOn, field, func, expectError ?? false);
  }

  public IHtmlString RunTest(ITypedItem item, string title, string field, Func<ITypedItem, string, object> func, bool? expectError = null) {
    var exists = item.ContainsKey(field);
    return InnermostTest(title, expectError ?? !exists, () => func(item, field));
  }
  public IHtmlString InnermostTest(string title, bool expectError, Func<object> action) {
    var result = title + " (expect: " + (expectError ? "‚ö†Ô∏è" : "üëçüèΩ") + ")" + "\n";
    try {
      var actResult = action();
      return Kit.HtmlTags.Li(expectError 
        ? result + "‚ö†Ô∏è‚ùå (no error!)" + actResult
        : result + "üëçüèΩ‚úÖ" + actResult
      );
    }
    catch (Exception ex) {
      var msg = DetailedErrorAlreadyShown ? Text.Ellipsis(ex.Message, 100) : ex.Message;
      DetailedErrorAlreadyShown = true;
      return Kit.HtmlTags.Li(expectError
        ? result + "‚ö†Ô∏è‚úÖ" + msg
        : result + "‚ùå (not expected)" + msg
      );
    }
  }
  private bool DetailedErrorAlreadyShown = false;
}

<h2 @Kit.Toolbar.Default(StrictItem)>Statistics</h2>
<ol>
  <li>
    @{ var keys = StrictItem.Keys(); }
    Keys: @keys.Count()
    <ol> @foreach(var k in keys) { <li>@k</li> } </ol>
  </li>
  <li>
    @{ keys = StrictItem.Keys(only: new [] { "String", "Text", "NonExisting" }); }
    Keys only String, Text, NonExisting: @keys.Count()
    <ol> @foreach(var k in keys) { <li>@k</li> } </ol>
  </li>
  <li>Contains "String": @StrictItem.ContainsKey("String")</li>
  <li>!Contains "StringNonExisting": @StrictItem.ContainsKey("StringNonExisting")</li>
  <li>Contains "Child.String": @StrictItem.ContainsKey("Child.String")</li>
  <li>!Contains "Child.StringNonExisting": @StrictItem.ContainsKey("Child.StringNonExisting")</li>
</ol>

<h2>Typed Values (string, various numbers)</h2>
<ol>
  @Strict("Title", null, (i, n) => i.String(n))
  @Strict("TitleNonExisting", null, (i, n) => i.String(n))
  @Strict("TitleNonExisting", "w/true", (i, n) => i.String(n, required: true))
  @Strict("TitleNonExisting", "w/false", (i, n) => i.String(n, required: false), false)
  @Loose("TitleNonExisting", "", (i, n) => i.String(n))
  @Loose("TitleNonExisting", "required=true", (i, n) => i.String(n, required: true), true)
  @Loose("TitleNonExisting", "required=false", (i, n) => i.String(n, required: false), false)
  @Strict("TitleNonExisting", "DYN", (i, n) => i.Dyn.TitleNonExisting)
  @Loose("TitleNonExisting", "DYN", (i, n) => i.Dyn.TitleNonExisting)
</ol>


<h2>Strict using Get</h2>
<ol>
  @Strict("Title", null, (i, n) => i.Get(n))
  @Strict("TitleNonExisting", null, (i, n) => i.Get(n))
  @Strict("TitleNonExisting", "w/true", (i, n) => i.Get(n, required: true))
  @Strict("TitleNonExisting", "w/false", (i, n) => i.Get(n, required: false), false)
  @Loose("TitleNonExisting", "", (i, n) => i.Get(n))
  @Loose("TitleNonExisting", "required=true", (i, n) => i.Get(n, required: true), true)
  @Loose("TitleNonExisting", "required=false", (i, n) => i.Get(n, required: false), false)
</ol>

<h2>Strict using Get&lt;string&gt;</h2>
<ol>
  @Strict("Title", null, (i, n) => i.Get<string>(n))
  @Strict("TitleNonExisting", null, (i, n) => i.Get<string>(n))
  @Strict("TitleNonExisting", "w/true", (i, n) => i.Get<string>(n, required: true))
  @Strict("TitleNonExisting", "w/false", (i, n) => i.Get<string>(n, required: false), false)
  @Loose("TitleNonExisting", "", (i, n) => i.Get(n))
  @Loose("TitleNonExisting", "required=true", (i, n) => i.Get<string>(n, required: true), true)
  @Loose("TitleNonExisting", "required=false", (i, n) => i.Get<string>(n, required: false), false)
</ol>

<h2>WYSIWYG / HTML</h2>
<ol>
  @Strict("Wysiwyg", null, (i, n) => i.Html(n))
  @Strict("WysiwygNonExisting", null, (i, n) => i.Html(n))
  @Loose("WYSIWYG", "", (i, n) => i.Html(n))
  @Loose("WysiwygNonExisting", null, (i, n) => i.Html(n))
</ol>

<h2>Child</h2>
<ol>
  @Strict("Child", null, (i, n) => i.Child(n))
  @Strict("Child", "Child using GET - must check type", (i, n) => i.Get(n))
  @Strict("ChildNonExisting", null, (i, n) => i.Child(n))

  @Strict("Child.Title", "(using .Child...)", (i, n) => i.Child("Child").String("Title"))
  @Strict("Child.Title", null, (i, n) => i.String(n))
  @Strict("Child.TitleNonExisting", null, (i, n) => i.String(n))
  @Strict("ChildNonExisting.Title", null, (i, n) => i.String(n))

  @Loose("Child.TitleNonExisting", "", (i, n) => i.String(n))
  @Loose("ChildNonExisting.Title", "", (i, n) => i.String(n))
</ol>

<h2>Attribute Output</h2>
<ol>
  <li>Test attribute HTML (wihouth special code): @StrictItem.Attribute("Title")</li>
  @Strict("Title", null, (i, n) => i.Attribute(n))
  @Strict("TitleNonExisting", null, (i, n) => i.Attribute(n))
  @Strict("TitleNonExisting", "w/true", (i, n) => i.Attribute(n, required: true))
  @Strict("TitleNonExisting", "w/false", (i, n) => i.Attribute(n, required: false), false)
  @Loose("TitleNonExisting", "", (i, n) => i.Attribute(n))
  @Loose("TitleNonExisting", "required=true", (i, n) => i.Attribute(n, required: true), true)
  @Loose("TitleNonExisting", "required=false", (i, n) => i.Attribute(n, required: false), false)
</ol>